저는 중학생 때, 처음 프로그래밍을 접했습니다. 당시에 열정으로 결국 고등학교를 '부산컴퓨터 과학고'를 진학하게 됩니다. 그리고 부산대 '기계과'에 진학합니다.

원래 컴퓨터 쪽으로 가려고 했는데, 좋아하는 일을 직업으로 가지게되면 싫어질까봐 다른 학과로 진학하고 프로그래밍은 취미로 남겨두려고 한것입니다. 이 당시 리버싱 엔지니어링에 관심이 컸습니다. 그래서 ollydbg 나 soft-ice 등의 프로그램으로 각종 프로그램의 작동원리를 분석하고 파해치고 하는일에 조금 동경심을 느꼈습니다. 이 호기심은 후술할 KPacker 를 만들게 되는 원동력이 됩니다. 그러다가 1학년을 마치고 군대를 갑니다. 군대에서 그냥 좋아하는 일을 직업으로 삼자고 결심이 서게됩니다. 그리하여 다시 기계과에서 컴퓨터공학부로 전과를 하게 됩니다. 

전과를 하여서 무난하게 졸업을 하는 듯 하였으나, 복학 당시 사업에 관심이 많았던 같은 동아리 형이 창업을 해보자고 꼬득이는 바람에 2012.03.02~2015.03.28 동안 일을 하게 됩니다. cocos2d-x 라는 C++ 멀티플랫폼으로 개발을 했는데, 이 때 쌓은 실무 경험이 저에겐 신선한 충격이었고 즐거웠습니다.


군 입대전에 MFC 프로젝트로 ksf creator2 를 개발했습니다.
약 4개월 정도 혼자 진행한 프로젝트입니다. KSF 를 편집하고 재생하는 프로그램인데 기존의 ksf creator1 을 크게 개량 시켰습니다. https://namu.wiki/w/KSF 에 KSF이 뭔지 알 수 있습니다.
http://hsnks100.tistory.com/42  여기서 배포하고 있고, https://github.com/hsnks100/ksf-creator-cpp 으로 소스를 옮겨놓은 상태입니다.
gdi+, fmod, MFC, C++ 0x 를 써본 프로젝트이며, 현재 외국에서도 ( https://www.youtube.com/watch?v=aFnuEV7DG0o ) 아직 쓰는 팬들도 있습니다.

최근에 electron-js 프로젝트로 포팅중입니다. https://github.com/hsnks100/ksf-creator-js
-----------------------------------------------------------------------------------------------
회사에서 진행한 게임으론 '섬란카구라 땅따먹기' 가 있습니다. 개발도중NHN 에서 연락이 와서 NHN 이 퍼블리싱을 맡았습니다.
프로모션 https://www.youtube.com/watch?v=3SCebAQmzvY 입니다.
3인(서버, 클라2) 외 그래픽 디자이너 3 명이서 1년 반 개발했습니다.
저는 몬스터 공격/이동 패턴, 플레이어 공격패턴구현, UI, 외부 API 연동을 맡았습니다. cocos2d-x를 사용했고, 클릭시 가슴이 흔들리는 효과는 opengl es를 이용하여 구현했습니다.
이 프로젝트를 하면서 git이나 회의, 퍼블리셔와 일하는 법을 알게되었습니다. 현재 플레이는 해볼 수 없고, 구글 스토어에서 프로젝트가 반려되었기에 성과는 유튜브에 남겨진 영상들이 전부입니다. 많은 열정을 쏟았는데, 제대로 출시도 못한게 한이 큽니다.
--------------------------------------------------------------------------
부산대 보안 동아리에서 진행한 KPacker

PE32 파일을 디버깅이 어렵게끔 anti debugging 루틴을 넣어보는 프로젝트입니다.

기본적인 아이디어는 먼저 실행 파일을 변형시킨후(static analysis 방지) import table의 entry point를 수정하여 복호화 시키는 section으로 점프하게 만듭니다.

그리고 모든 복호화가 끝나면 OEP(Original Entry Point)로 점프합니다. 복호화 시키는 코드는 

어셈으로 작성 하였으며 가장 어려웠던 부분이었습니다. 

https://github.com/hsnks100/KPacker/blob/master/KPacker/packer.h 의 void insertUnpack() 에 가면 그 내용이 있습니다.

KPacker 를 만들면서 PE32 에 대한 이해도가 높아졌다고 생각합니다. 하지만 이 분야의 최고인 themida 같은 프로젝트의 개발 프로세스가 많이 궁금했습니다.

